package org.moriano.locones.screen;

import java.awt.*;

/**
 * So, the NES has a SystemPalette that consists of colors going from byte 0x00 to to 0x3F.
 *
 * The system palette is STATIC, it does not change over time.
 *
 * Hence, the values are just hardcoded. See https://www.nesdev.org/wiki/PPU_palettes for
 * the actual colors, etc.
 *
 * Each color is represented as an RGB, meaning that for each color we need 3 bytes (Red, Green, Blue).
 *
 * As such, what we have here is an array of arrays. The top array as a length of 0x3F, and each position
 * is an array of 3 values for RGB
 *
 * For convenience I provide methods to return either colors as 3 byte arrays or colors as a single byte. This
 * is specific to java.
 */
public enum SystemPalette {

    INSTANCE(new int[][]{
            // First row, 0x00 to 0x0F
            {0x62, 0x62, 0x62}, {0x00, 0x1F, 0xB2}, {0x24, 0x04, 0xC8}, {0x52, 0x00, 0xB2},
            {0x73, 0x00, 0x76}, {0x80, 0x00, 0x24}, {0x73, 0x0B, 0x00}, {0x52, 0x28, 0x00},
            {0x24, 0x44, 0x00}, {0x00, 0x57, 0x00}, {0x00, 0x5C, 0x00}, {0x00, 0x53, 0x24},
            {0x00, 0x3C, 0x76}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},

            // Second row, 0x10 to 0x1F
            {0xAB, 0xAB, 0xAB}, {0x0D, 0x57, 0xFF}, {0x4B, 0x30, 0xFF}, {0x8A, 0x13, 0xFF},
            {0xBC, 0x08, 0xD6}, {0xD2, 0x12, 0x69}, {0xC7, 0x2E, 0x00}, {0x9D, 0x54, 0x00},
            {0x60, 0x7B, 0x00}, {0x20, 0x98, 0x00}, {0x00, 0xA3, 0x00}, {0x00, 0x99, 0x42},
            {0x00, 0x7D, 0xB4}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},

            //Third row, 0x20 to 0x2F
            {0xFF, 0xFF, 0xFF}, {0x53, 0xAE, 0xFF}, {0x90, 0x85, 0xFF}, {0xD3, 0x65, 0xFF},
            {0xFF, 0x57, 0xFF}, {0xFF, 0x5D, 0xCF}, {0xFF, 0x77, 0x57}, {0xFA, 0x9E, 0x00},
            {0xBD, 0xC7, 0x00}, {0x7A, 0xE7, 0x00}, {0x43, 0xF6, 0x11}, {0x26, 0xEF, 0x7E},
            {0x2C, 0xD5, 0xF6}, {0x4E, 0x4E, 0x4E}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00},

            // Fourth row, 0x30 to 0x3F
            {0xFF, 0xFF, 0xFF}, {0xB6, 0xE1, 0xFF}, {0xCE, 0xD1, 0xFF}, {0xE9, 0xC3, 0xFF},
            {0xFF, 0xBC, 0xFF}, {0xFF, 0xBD, 0xF4}, {0xFF, 0xC6, 0xC3}, {0xFF, 0xD5, 0x9A},
            {0xE9, 0xE6, 0x81}, {0xCE, 0xF4, 0x81}, {0xB6, 0xFB, 0x9A}, {0xA9, 0xFA, 0xC3},
            {0xA9, 0xF0, 0xF4}, {0xB8, 0xB8, 0xB8}, {0x00, 0x00, 0x00}, {0x00, 0x00, 0x00}

    });

    private int[][] colors;
    private int[] colorsAsRGBInts;


    SystemPalette(int[][] colors) {

        this.colors = colors;
        this.colorsAsRGBInts = new int[colors.length];
        int idx = 0;
        for(int i = 0; i< colors.length; i++) {
            int[] colorRaw = this.colors[i];
            int color = new Color(colorRaw[0], colorRaw[1], colorRaw[2]).getRGB();
            this.colorsAsRGBInts[idx] = color;
            idx ++;
        }



    }

    /**
     * The raw values of the palete, where each color is an array of 3 bytes representing an RGB
     * @return
     */
    public int[][] getColors() {
        return this.colors;
    }

    /**
     * The palete as single byte arrays. Convenient in java
     * @return
     */
    public int[] getColorsAsRGBInts() {
        return this.colorsAsRGBInts;
    }

}
